[comment encoding = UTF-8 /]
[module interfejsy('http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')]

[import test2Acceleo::common::sekwencje /]
[import test2Acceleo::common::aktywnosci/]

[template public generateElement(i : Interface)]
[file (i.classFileName(), false, 'UTF-8')]
package [i.containingPackages().name->sep('.')/];

[if (i.isAbstract)] abstract [/if] interface [i.name/] 
 {
// Atrybuty:
	[for (it : Property | i.ownedAttribute)]
	[it.visibility/] [it.type.name/] [it.name/][if (it.upper) <> 1][ '[' /][it.upper/][ ']' /][/if];
	[/for]
// Getters & Setters:
	[for (it : Property | i.ownedAttribute)]
	[it.visibility/] [it.type.name/] get[it.name/]() { return [it.name/]; }
	void set[it.name/]([it.type.name/] w) { [it.name/] = w; }
	[/for]
// Operacje:	
	[for (op : Operation | i.ownedOperation)]
	[op.visibility/] [if (op.type.oclIsUndefined() or op.type.name.oclIsInvalid())] void 
	[else] [op.type.name/] [/if] [op.name/]() {
		[putBody(op.method)/]
	}	
	[/for]
	
};
	[/file]
[/template]

[query public classFileName (aClass : Interface) : String = 
 aClass.qualifiedName().replaceAll('\\.','/').concat('.java')
 /]

[query public qualifiedName (aClass : Interface) : String = 
 aClass.containingPackages().name->sep('.')->including('.')->including(aClass.name)->toString()
 /]

[query public containingPackages (aClass : Interface) : Sequence(Package) = 
 aClass.ancestors(Package)->reject(oclIsKindOf(Model))->reverse()
 /]

